module LinkedList

class LinkedListNode<T> {
    Item is public T
    Next is LinkedListNode<T> OwnedRef Option
    
    construct with item {
        Item = item
        Next = None
    }

    construct with item next {
        Item = item
        Next = Some (OwnedRef next)
    }

    copy { //return is the implicit return value
        return.Item = Item
        return.Next = None
    }
}




class LinkedList<T> {
    private Head is LinkedListNode<T>
    private Length is int


    construct with singleItem {
        Head = LinkedListNode singleItem
        Length = 1
    }

    public prepend with newItem {
        Head = LinkedListNode newItem &Head
        Length++
    }

    public toList returns List {
        List<T> target = List
        target.reserve Length

        for new current = Head, current.Next.Valid, current = current.Next {
            resultList.append current.Item
        }

        return target
    }
}





const class PngImage {
    BackingImage is private Image

    construct with filePath {
        new fileReader = FileStreamReader filePath
        new pngDecorder = PngDecoderStream fileReader 
        BackingImage = pngDecoder.decoded
    }

    backingImage as public Image ReadRef {
        return = ReadRef &BackingImage
    }

    save with filePath {
        new fileWriter = FileWriteStream filePath
        new pngEncode = PngEncodeStream BackingImage
        new byteArray = pngEncode.encoded
        fileWriter.write byteArray
    }
}